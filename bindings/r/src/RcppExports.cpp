// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "omicsds_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// version
Rcpp::CharacterVector version();
RcppExport SEXP _omicsds_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(version());
    return rcpp_result_gen;
END_RCPP
}
// connect
size_t connect(const std::string& workspace, const std::string& array);
RcppExport SEXP _omicsds_connect(SEXP workspaceSEXP, SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type workspace(workspaceSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(connect(workspace, array));
    return rcpp_result_gen;
END_RCPP
}
// disconnect
void disconnect(size_t handle);
RcppExport SEXP _omicsds_disconnect(SEXP handleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type handle(handleSEXP);
    disconnect(handle);
    return R_NilValue;
END_RCPP
}
// query_features
Rcpp::DataFrame query_features(size_t handle, Rcpp::Nullable<Rcpp::CharacterVector> features, Rcpp::Nullable<Rcpp::List> sample_range);
RcppExport SEXP _omicsds_query_features(SEXP handleSEXP, SEXP featuresSEXP, SEXP sample_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type handle(handleSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type sample_range(sample_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(query_features(handle, features, sample_range));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _omicsds_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpp_vector_access1
void rcpp_vector_access1();
RcppExport SEXP _omicsds_rcpp_vector_access1() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_vector_access1();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_omicsds_version", (DL_FUNC) &_omicsds_version, 0},
    {"_omicsds_connect", (DL_FUNC) &_omicsds_connect, 2},
    {"_omicsds_disconnect", (DL_FUNC) &_omicsds_disconnect, 1},
    {"_omicsds_query_features", (DL_FUNC) &_omicsds_query_features, 3},
    {"_omicsds_rcpp_hello_world", (DL_FUNC) &_omicsds_rcpp_hello_world, 0},
    {"_omicsds_rcpp_vector_access1", (DL_FUNC) &_omicsds_rcpp_vector_access1, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_omicsds(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
