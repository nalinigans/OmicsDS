#
# basic.yml
#
# The MIT License
#
# Copyright (c) 2022 Omics Data Automation, Inc.
# Copyright (c) 2023-2024 dātma, inc™
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

name: build 

on:
  push:
    paths-ignore:
      - '**/*.md'
  pull_request:
    paths-ignore:
      - '**/*.md'

env:
  CMAKE_BUILD_TYPE: Coverage
  CMAKE_BUILD_DIR: ${{github.workspace}}/build
  PROTOBUF_VERSION: 3.21.6
  CATCH2_VER: 2.13.9

jobs:
  lint-cpp:
    name: Lint C++
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Check C++ Formatting
        working-directory: ${{github.workspace}}
        run: |
          sudo apt update -qq
          sudo apt install -y clang-format
          .github/scripts/clang_format.sh

  build:
    name: Main Build
    needs: lint-cpp
    strategy:
      matrix:
        os: [macos-12, ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    env:
      OMICSDS_INSTALL_DIR: install-${{matrix.os}}
      OMICSDS_HOME: ${{github.workspace}}/install-${{matrix.os}}

    steps:
    - uses: actions/checkout@v4

    - name: Create LFS file list
      run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

    # All caching actions should happen before  restoration. This action automatically
    # caches the artifacts as post-build operations
    - name: Cache LFS files
      uses: actions/cache@v4
      with:
        path: .git/lfs
        key: lfs-${{ hashFiles('.lfs-assets-id') }}-v1-${{runner.os}}

    - name: Cache AWS SDK
      uses: actions/cache@v4
      with:
        path: ~/awssdk-install
        key: awssdk-v1-${{matrix.os}}

    - name: Cache GCS SDK
      uses: actions/cache@v4
      with:
        path: ~/gcssdk-install
        key: gcssdk-v1-${{matrix.os}}

    - name: Cache Protobuf
      uses: actions/cache@v4
      with:
        path: ~/protobuf-install/{{env.PROTOBUF_VERSION}}
        key: protobuf-install-v{{env.PROTOBUF_VERSION}}-${{matrix.os}}
  
    - name: Cache Catch2 artifacts
      if: startsWith(matrix.os,'ubuntu')
      uses: actions/cache@v4
      with:
        path: ~/catch2-install
        key: catch2-v${{env.CATCH2_VER}}-${{matrix.os}}

    - name: Create Build Environment
      shell: bash
      run: |
        git lfs pull
        mkdir -p $CMAKE_BUILD_DIR

    - name: Build
      working-directory: ${{env.CMAKE_BUILD_DIR}}
      run: |
        source $GITHUB_WORKSPACE/.github/scripts/install_prereqs.sh
        echo OPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
                                -DCMAKE_INSTALL_PREFIX=$OMICSDS_HOME \
                                -DOMICSDS_PROTOBUF_VERSION=$PROTOBUF_VERSION\
                                -DCMAKE_PREFIX_PATH=~/catch2-install
        make -j4
        cmake --build . --target test --parallel 4 || $GITHUB_WORKSPACE/.github/scripts/print_test_log.sh
                                make install

    - name: Tar Install Artifacts
      working-directory: ${{github.workspace}}
      run: tar -cvf $OMICSDS_INSTALL_DIR.tar $OMICSDS_INSTALL_DIR 

    - name: Upload Install Artifact
      uses: actions/upload-artifact@v4
      with:
        name: OmicsDS-Install-${{runner.os}}
        path: ${{env.OMICSDS_HOME}}.tar
        retention-days: 1

    - name: Upload Report to CodeCov
      uses: codecov/codecov-action@v4

  docs:
    needs: build
    uses: ./.github/workflows/docs.yml
    with:
      runner: ubuntu-22.04
    
  r-lang:
    needs: build
    uses: ./.github/workflows/R.yml
    with:
      runner: ubuntu-22.04

  python:
    needs: build
    uses: ./.github/workflows/python.yml
    with:
      runner: ubuntu-22.04

