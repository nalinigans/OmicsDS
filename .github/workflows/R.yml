name: R build

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string

jobs:
  r-build:
    name: R Build
    runs-on: ${{ inputs.runner }}
    env:
      OMICSDS_INSTALL_DIR: install-${{ inputs.runner }}
      OMICSDS_HOME: ${{github.workspace}}/install-${{ inputs.runner }}
      RENV_PATHS_ROOT: ~/.local/share/renv

    steps:
    - uses: actions/checkout@v4

    - name: Set up R
      uses: r-lib/actions/setup-r@v2

    - name: Cache packages
      uses: actions/cache@v4
      with:
        path: ${{ env.RENV_PATHS_ROOT }}
        key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}
        restore-keys: |
          ${{ runner.os }}-renv-
        
    - name: Restore packages
      shell: Rscript {0}
      run: |
        if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
        #renv::restore() || echo "*** Could not renv::restore() packages"

    - name: Download Install Artifact from main build
      uses: actions/download-artifact@v4
      with:
        name: OmicsDS-Install-${{runner.os}}

    - name: Extract from downloaded install artifact
      working-directory: ${{github.workspace}}
      run: tar -xvf $OMICSDS_HOME.tar && ls -l $OMICSDS_HOME

    - name: Install Dependencies - Ubuntu
      shell: Rscript {0}
      run: |
        system("echo RENV_PATHS_ROOT=${RENV_PATHS_ROOT}")
        system("ls ${RENV_PATHS_ROOT}")
        system("sudo apt-get install -y libcurl4-openssl-dev")
        install.packages(c("remotes", "rcmdcheck"))
        remotes::install_deps("bindings/r", dependencies = TRUE)
      env:
        R_REMOTES_NO_ERRORS_FROM_WARNINGS: true

    - name: R CMD Check
      shell: Rscript {0}
      run: rcmdcheck::rcmdcheck("bindings/r", args=c("--no-manual", "--ignore-vignettes"), build_args="--no-build-vignettes", error_on = "error")
